!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?module.exports=o():"function"==typeof define&&define.amd?define(o):(e="undefined"!=typeof globalThis?globalThis:e||self).CustomProtocol=o()}(this,(function(){"use strict";const e=(e,o,t)=>new Promise(((r,l)=>{e({url:o,type:"vector"===t?"arrayBuffer":"string"},((e,o,t,s)=>{if(e)l(e);else{let e;e=o instanceof ArrayBuffer?new Uint8Array(o):JSON.stringify(o);const t=new Blob([e]),l=URL.createObjectURL(t);r(l)}}))}));return o=>{const t=void 0!==o.addProtocol&&void 0===o._protocols;return t||(o._protocols=o._protocols||new Map,o.addProtocol=o.addProtocol||((e,t)=>{var r;null===(r=o._protocols)||void 0===r||r.set(e,t)}),o.removeProtocol=o.removeProtocol||(e=>{var t;null===(t=o._protocols)||void 0===t||t.delete(e)})),{vector:class extends(o.Style.getSourceType("vector")){constructor(){super(...arguments)}loadTile(r,l){var s,n;const i=r.tileID.canonical.url(this.tiles,this.scheme),c=i.substring(0,i.indexOf("://"));if(!t&&(null===(s=o._protocols)||void 0===s?void 0:s.has(c))){const t=null===(n=o._protocols)||void 0===n?void 0:n.get(c);e(t,i,this.type).then((e=>{r.tileID.canonical.url=function(){return delete r.tileID.canonical.url,e},super.loadTile(r,(function(){URL.revokeObjectURL(e),l(...arguments)}))})).catch((e=>{throw console.error("Error loading tile",e.message),e}))}else super.loadTile(r,l)}},raster:class extends(o.Style.getSourceType("raster")){constructor(){super(...arguments)}loadTile(r,l){var s,n;const i=r.tileID.canonical.url(this.tiles,this.scheme),c=i.substring(0,i.indexOf("://"));if(!t&&(null===(s=o._protocols)||void 0===s?void 0:s.has(c))){const t=null===(n=o._protocols)||void 0===n?void 0:n.get(c);e(t,i,this.type).then((e=>{r.tileID.canonical.url=function(){return delete r.tileID.canonical.url,e},super.loadTile(r,(function(){URL.revokeObjectURL(e),l(...arguments)}))})).catch((e=>{throw console.error("Error loading tile",e.message),e}))}else super.loadTile(r,l)}},geojson:class extends(o.Style.getSourceType("geojson")){constructor(){super(...arguments),this.type="geojson"}_updateWorkerData(r){var l,s;const n=this,i=n._data,c=()=>{super._updateWorkerData(r)};if("string"==typeof i){const r=i.substring(0,i.indexOf("://"));if(!t&&(null===(l=o._protocols)||void 0===l?void 0:l.has(r))){const t=null===(s=o._protocols)||void 0===s?void 0:s.get(r);e(t,i,this.type).then((e=>{n._data=e,c()}))}else c()}else c()}}}}}));
//# sourceMappingURL=mapbox-gl-vector-custom-protocol.min.js.map
